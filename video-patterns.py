import json
import serial #Requires PySerial
import serial.tools.list_ports
import time
import applescript
import signal
import sys


#####################################
#
# Detect and Connect to Vybe Device
#
#####################################


#Load Vybe device details
vybe_desc = {}
with open('vybe.json', 'r') as f:
	vybe_desc = json.load(f)


#Search for all connected Vybe devices
connectedDevices = []
for portcandidate in serial.tools.list_ports.comports():
	port_type = portcandidate[2] #each port description is a list of length 3; item 3 has vendor id and product id
	# if port_type.find('USB VID:PID=%s:%d'%(str(vybe_desc["comm"]["usbserial"]["vid"]), vybe_desc["comm"]["usbserial"]["pid"])) >= 0:
	if port_type.find('USB VID:PID=0483:5740')>= 0: #or just change json to "0483", always plug in power first, rather than usb first
		print "Found %s"%(portcandidate[0],)
		connectedDevices.append(portcandidate[0]) #name of this port

#Connect to first found Vybe device
vybe = None
if connectedDevices:
	portname = connectedDevices[0]
	vybe = serial.Serial(port=portname, baudrate=vybe_desc["comm"]["usbserial"]["baud"], writeTimeout = 0.05)
else:
	raise IOError("%s not detected."%(vybe_desc["name"],))

#####################################
#
# Functions for activating actuators
#
#####################################

def SetVoicecoil(index, value):
	value = min(max(0, value), 255)

	# format: "VCL <number as character> <buzz value 0-255 as character\n"
	msg = 	"VCL %s %s\n"%(str(index), chr(value))
	vybe.write(msg)
	vybe.flush()


def SetMotor(index, value):
	value = min(max(0, value), 255)

	# format: "MTR <number as character> <buzz value 0-255 as character\n"
	msg = 	"MTR %s %s\n"%(str(index), chr(value))
	vybe.write(msg)
	vybe.flush()

######################################################
#
# Heartbeat function parameterized 
# Want to insert "gaps" programmatically before each
# Fixed heartbeat (always same time buzz?)
######################################################
def HeartBeat():
	buzz_intensity_motor_1 = 130 
	buzz_intensity_motor_2 = 195 
	buzz_duration = 0.084 #seconds for vibrator to actually vibrate
	# buzz_duration = 0.07 #seconds for vibrator to actually vibrate
	# break_duration = 0.125 #seconds to sleep as our "break", might need to re-adjust depending on "perceived urgency" of heartbeat, 0.01 for intense, 0.1 as norm
	break_duration = 0.084 #seconds to sleep as our "break", might need to re-adjust depending on "perceived urgency" of heartbeat, 0.01 for intense, 0.1 as norm

	#first beat of heartbeat
	SetMotor(5, buzz_intensity_motor_1)
	time.sleep(buzz_duration)
	SetMotor(5, 0)

	#break btw beats of heartbeat
	time.sleep(break_duration)

	#second beat of heartbeat
	SetMotor(6, buzz_intensity_motor_2)
	time.sleep(buzz_duration)
	SetMotor(6, 0)

######################################################
#
# Checker
# 
######################################################
def Checker(value):
    if value == 'beat':
        HeartBeat()
        print 'Beat'
    else:
        SetMotor(5,0)
        SetMotor(6,0)
        time.sleep(float(value))
        print 'Pause'

######################################################
#
# Run Video AppleScript
# 
######################################################

def video():
    script = applescript.AppleScript('''
    tell application "QuickTime Player"
    activate
	set theMovie to open file "Matthew's MacBook Air:Users:Matthew:Desktop:edited driving clips:drive-full-transistion.mov"
	tell theMovie
	    play
		set the presenting to true
		set the looping to false
	end tell
	
	--use this to see what properties can be modified
	--get the properties of theMovie
    end tell
    ''').run()

def kill_running_video():
    script = applescript.AppleScript('''
    tell application "System Events"
	set ProcessList to name of every process
	if "QuickTime Player" is in ProcessList then
		set ThePID to unix id of process "QuickTime Player"
		do shell script "kill -KILL " & ThePID
	end if
    end tell
    ''').run()

### Only works at the end
def end_video():
    script = applescript.AppleScript('''
    tell application "QuickTime Player" to quit
    ''').run()


######################################################
#
# Catch control + c - kill script safely 
# 
######################################################

def signal_handler(signal, frame):
    #end_video() #doesnt seem to run here?
    #kill_running_video() #also doesn't seem to work here
    exit(0)

def zero():
	for i in range(1,7):
		SetVoicecoil(i, 0)
		SetMotor(i, 0)



########################################################
# Play Zone
########################################################

driving_part_1 = [1.7, 'beat', 1.7, 'beat', 1.7, 'beat', 1.7, 'beat', 1.7, 'beat', 1.7, 'beat', 1.7, 'beat', 1.7, 'beat', 1.7, 'beat', 1.7, 'beat', 1.7, 'beat']
driving_part_2 = [1.4, 'beat', 1.4, 'beat', 1.0, 'beat', 0.5, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat']
driving_part_3 = [0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat',
0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat',
0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat'
]
driving_part_4 = [ 0.3, 'beat', 0.3, 'beat', 0.5, 'beat', 0.5, 'beat', 0.5, 'beat',
1.0, 'beat', 1.4, 'beat'
]
driving_part_5 = [1.7, 'beat', 1.7, 'beat', 1.4, 'beat', 1.4, 'beat', 0.5, 'beat']
driving_part_6 = [0.5, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 
0.3, 'beat', 0.3, 'beat', 0.3, 'beat', 0.3, 'beat',  0.3, 'beat', 0.3, 'beat', 0.3, 'beat',  0.3, 'beat',  0.3, 'beat',  0.3, 'beat', 0.3, 'beat', 0.3, 'beat',
0.5, 'beat', 0.5, 'beat', 1.0, 'beat', 1.4, 'beat'
]


motor5 = [
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
130,130,0,0,0,0]
motor6 = [
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,195,195]


video()

# for idx,val in enumerate(driving_part_1): 
#    print idx 
#    Checker(val)
# 
# #this does work here at least
# #kill_running_video()

# for idx,val in enumerate(driving_part_2): 
#    print idx 
#    Checker(val)

# for idx,val in enumerate(driving_part_3): 
#    print idx 
#    Checker(val)

# for idx,val in enumerate(driving_part_4): 
#    print idx 
#    Checker(val)

# for idx,val in enumerate(driving_part_5): 
#    print idx 
#    Checker(val)

# for idx,val in enumerate(driving_part_6): 
#    print idx 
#    Checker(val)

for i in range(0,len(motor5)):
	SetMotor(5,motor5[i])
	SetMotor(6,motor6[i])
	time.sleep(0.042)


end_video()
zero()
exit(0)

#for killing script and ending safely on control+c
signal.signal(signal.SIGINT, signal_handler)
# sleep until a signal is received
signal.pause()